<?php

namespace App\Console\Commands;

use App\CallSchedule;
use App\Libraries\Modem;
use App\NumberList;
use Cache;
use Illuminate\Console\Command;
use Log;
use Carbon\Carbon;

class CreateSchedule extends Command
{

	const DAY_TIME_BUFFER = 20;
	const DAY_START_TIME = '13:13:13';
	const DAY_START_INTERVAL_MINUTES = 25;
	const MAX_TOTAL_MINUTES_PER_DAY = 110;
	const MIN_BREAK_MINUTES = 45;
	const MAX_BREAK_MINUTES = 70;
	const MIN_MINUTES_PER_CALL = 5;
	const MAX_MINUTES_PER_CALL = 10;
	const BREAK_EXTEND_OFFSET = 15;

	/**
	 * The name and signature of the console command.
	 *
	 * @var string
	 */
	protected $signature = 'voip:schedule:create {date?} {time?} {limit?} {usb?}';

	/**
	 * The console command description.
	 *
	 * @var string
	 */
	protected $description = 'Create schedule';


	/**
	 * Execute the console command.
	 *
	 * @return mixed
	 */
	public function handle()
	{

		if (Cache::get('sys::settings::advanced-logging')) {
			Log::info('[SYS][CRON][CREATE-SCHEDULER]');
		}

		$testNumbers = [
			'+37066304723',
			'+37066302696',
			'+37066301793',
			'+37066187090',
			'+37066185093',
			'+37064720557',
			'+37063122652',
			'+37052533040',
			'+37052521018',
			'+37046450619',
			'+37042521227',
			'+37041431117',
			'+37041375950',
			'+37041202848',
			'+37041200788',
			'+37037256079',
			'+48780261042',
			'+37090203045',
			'+37070074695',
			'+37069757814',
			'+37066811183',
			'+37066314018',
			'+37037364054',
			'+37066872087',
			'+37066818068',
			'+37066817848',
			'+37052082864',
			'+37034379889',
			'+37066456566',
			'+37066814085',
			'+37066813410',
			'+37066812054',
			'+48700001557',
			'+48579421125',
			'+37066329443',
			'+37066328471',
			'+37066327446',
			'+37066326471',
			'+37066325477',
			'+37066319094',
			'+37066318060',
			'+37066317040',
			'+37066316083',
			'+37066315083',
			'+37066186093',
			'+37070087297',
			'+37069758044',
			'+37090002094',
			'+37070520087',
			'+37090301092',
			'+37070720249',
			'+37062100999',
			'+37068100298',
			'+37066968458',
			'+37068005708',
			'+37066960849',
			'+48729772199',
			'+48729773199',
			'+48729774199',
			'+48729775199',
			'+48729776199',
			'+48729777199',
			'+48729778199',
			'+48729779199',
			'+37066402149',
			'+37066404099',
			'+37066415299',
			'+37066416339',
			'+37066417339',
			'+37066434340',
			'+37066403149',
			'+37066757369',
			'+37066870149',
			'+37066406099',
			'+37066407099',
			'+37066408099',
			'+37066418099',
			'+37066419099',
			'+37052530620',
			'+37052529079',
			'+37046203099',
			'+37066474099',
			'+37066475099',
			'+37090900780',
			'+37066537489',
			'+48459150286',
			'+48126880049',
			'+48223501049',
			'+48227651049',
			'+48422069049',
			'+48614236049',
			'+48717079049',
			'+48918820049',
			'+48324501049',
			'+48223501021',
			'+37066435199',
			'+37066436099',
			'+37066437099',
			'+37066438099',
			'+37066439099',
			'+37031950559',
			'+37066843569',
			'+37066420468',
			'+37037933538',
			'+37066630538',
			'+37066415327',
			'+37066402148',
			'+37066757090',
			'+37066412010',
			'+37066414009',
			'+37066409009',
			'+37066757108',
			'+37066493599',
			'+48780206060',
			'+48780207023',
			'+48528809787',
			'+48585359297',
			'+37052510497',
			'+37070097497',
			'+48459500568',
			'+37069750827',
			'+37070502257',
			'+37062128103',
			'+37062151843',
			'+48459200356',
			'+37046070172',
			'+37065591120',
			'+37065155210',
			'+37065593820',
			'+37063031420',
			'+37063035470',
			'+37065152020',
			'+37065599880',
			'+37065159040',
			'+37063039950',
			'+37069897070',
			'+37062669810',
			'+37062664090',
			'+37069893790',
			'+37061081680',
			'+37062666650',
			'+37062663700',
			'+37060400150',
			'+37060026500',
			'+37060029890',
			'+37060667340',
			'+37060661900',
			'+37060407050',
			'+37060669510',
			'+37060403720',
			'+37060404130',
			'+37060024700',
			'+37052090374',
			'+37068103707',
			'+37066492008',
			'+37066541008',
			'+37066494339',
			'+48579480389',
			'+48814503330',
			'+37031071399',
			'+38682821935',
			'+38681890706',
			'+38644662856',
			'+38681815209',
			'+38682230499',
			'+38649552846',
			'+38641401926',
			'+38641402064',
			'+38641403038',
			'+38641405192',
			'+38641406507',
			'+38641407007',
			'+38641400093',
			'+38682890349',
		];

		$testNumbersFull = [
			'+34518444024',
			'+34518442055',
			'+34518441790',
			'+34807242359',
			'+34803428129',
			'+48739931162',
			'+48579530960',
			'+37066476885',
			'+37052871785',
			'+37046364841',
			'+37031335757',
			'+48729790509',
			'+48729780522',
			'+48729771140',
			'+48729770768',
			'+37091067660',
			'+37080246471',
			'+37080003045',
			'+37070712616',
			'+37070512352',
			'+37070510375',
			'+37069798265',
			'+37069753780',
			'+37069746094',
			'+37069120706',
			'+37069119867',
			'+37066866511',
			'+37066819019',
			'+37066815702',
			'+37066810011',
			'+37066651094',
			'+37066650939',
			'+37066643058',
			'+37066636217',
			'+37066635062',
			'+37066634042',
			'+37066633723',
			'+37066620910',
			'+37066535806',
			'+37066470798',
			'+37066460379',
			'+37066450780',
			'+37066440752',
			'+37066410759',
			'+37066401873',
			'+37066400021',
			'+37066340428',
			'+37066324457',
			'+37066323855',
			'+37066321401',
			'+37066320457',
			'+37066313054',
			'+37066310303',
			'+37066309786',
			'+37066307950',
			'+37066306775',
			'+37066304723',
			'+37066302696',
			'+37066301793',
			'+37066187090',
			'+37066185093',
			'+37064720557',
			'+37063122652',
			'+37052533040',
			'+37052521018',
			'+37046450619',
			'+37042521227',
			'+37041431117',
			'+37041375950',
			'+37041202848',
			'+37041200788',
			'+37037256079',
			'+48780261042',
			'+37090203045',
			'+37070074695',
			'+37069757814',
			'+37066811183',
			'+37066314018',
			'+37037364054',
			'+37066872087',
			'+37066818068',
			'+37066817848',
			'+37052082864',
			'+37034379889',
			'+37066456566',
			'+37066814085',
			'+37066813410',
			'+37066812054',
			'+48700001557',
			'+48579421125',
			'+37066329443',
			'+37066328471',
			'+37066327446',
			'+37066326471',
			'+37066325477',
			'+37066319094',
			'+37066318060',
			'+37066317040',
			'+37066316083',
			'+37066315083',
			'+37066186093',
			'+37070087297',
			'+37069758044',
			'+37090002094',
			'+37070520087',
			'+37090301092',
			'+37070720249',
			'+37062100999',
			'+37068100298',
			'+37066968458',
			'+37068005708',
			'+37066960849',
			'+48729772199',
			'+48729773199',
			'+48729774199',
			'+48729775199',
			'+48729776199',
			'+48729777199',
			'+48729778199',
			'+48729779199',
			'+37066402149',
			'+37066404099',
			'+37066415299',
			'+37066416339',
			'+37066417339',
			'+37066434340',
			'+37066403149',
			'+37066757369',
			'+37066870149',
			'+37066406099',
			'+37066407099',
			'+37066408099',
			'+37066418099',
			'+37066419099',
			'+37052530620',
			'+37052529079',
			'+37046203099',
			'+37066474099',
			'+37066475099',
			'+37090900780',
			'+37066537489',
			'+48459150286',
			'+48126880049',
			'+48223501049',
			'+48227651049',
			'+48422069049',
			'+48614236049',
			'+48717079049',
			'+48918820049',
			'+48324501049',
			'+48223501021',
			'+37066435199',
			'+37066436099',
			'+37066437099',
			'+37066438099',
			'+37066439099',
			'+37031950559',
			'+37066843569',
			'+37066420468',
			'+37037933538',
			'+37066630538',
			'+37066415327',
			'+37066402148',
			'+37066757090',
			'+37066412010',
			'+37066414009',
			'+37066409009',
			'+37066757108',
			'+37066493599',
			'+48780206060',
			'+48780207023',
			'+48528809787',
			'+48585359297',
			'+37052510497',
			'+37070097497',
			'+48459500568',
			'+37069750827',
			'+37070502257',
			'+37062128103',
			'+37062151843',
			'+48459200356',
			'+37046070172',
			'+37065591120',
			'+37065155210',
			'+37065593820',
			'+37063031420',
			'+37063035470',
			'+37065152020',
			'+37065599880',
			'+37065159040',
			'+37063039950',
			'+37069897070',
			'+37062669810',
			'+37062664090',
			'+37069893790',
			'+37061081680',
			'+37062666650',
			'+37062663700',
			'+37060400150',
			'+37060026500',
			'+37060029890',
			'+37060667340',
			'+37060661900',
			'+37060407050',
			'+37060669510',
			'+37060403720',
			'+37060404130',
			'+37060024700',
			'+37052090374',
			'+37068103707',
			'+37066492008',
			'+37066541008',
			'+37066494339',
			'+48579480389',
			'+48814503330',
			'+37031071399',
			'+38682821935',
			'+38681890706',
			'+38644662856',
			'+38681815209',
			'+38682230499',
			'+38649552846',
			'+38641401926',
			'+38641402064',
			'+38641403038',
			'+38641405192',
			'+38641406507',
			'+38641407007',
			'+38641400093',
			'+38682890349',
		];

		$testNumbersBiteMissing = [
			'+38641406507',
			'+37060407050',
			'+37031950559',
			'+48459150286',
			'+37090900780',
			'+37066537489',
			'+37064720557',
			'+48585359297',
			'+48227651049',
			'+38641403038',
			'+38681815209',
			'+37062663700',
			'+37062664090',
			'+48223501049',
			'+37066968458',
			'+37052510497',
			'+37068100298',
			'+37066404099',
			'+37090002094',
			'+37065591120',
			'+37062100999',
			'+48729775199',
			'+48422069049',
			'+37069893790',
			'+37065159040',
			'+37066415327',
			'+37062151843',
			'+37063039950',
			'+48729778199',
			'+37066316083',
			'+37066541008',
			'+38641407007',
			'+37069757814',
			'+37066439099',
			'+37065155210',
			'+37052521018',
			'+37062128103',
			'+37066325477',
			'+38641402064',
			'+37066812054',
			'+37066317040',
			'+37066419099',
			'+48614236049',
			'+48459500568',
			'+48780206060',
			'+37066402149',
			'+48729779199',
			'+37069750827',
			'+37066435199',
			'+37066817848',
			'+37066406099',
			'+37042521227',
			'+37052082864',
			'+37066475099',
			'+37052530620',
			'+37063122652',
			'+37052533040',
			'+37069897070',
			'+48918820049',
			'+37066437099',
			'+37062669810',
			'+48717079049',
			'+37066409009',
			'+37041375950',
			'+37066185093',
			'+37065599880',
			'+38641405192',
			'+37070074695',
			'+37037933538',
			'+48579480389',
			'+48579421125',
			'+37066872087',
			'+48729777199',
			'+48324501049',
			'+37066811183',
			'+37066326471',
			'+37065593820',
			'+37066328471',
			'+37068103707',
			'+37068005708',
			'+37066301793',
			'+37066757369',
			'+38644662856',
		];

		$pool = [];
		$pool['TELE2'] = [];
		$pool['TELE2']['numbers'] = NumberList::where('carrier', 'TELE2')->pluck('phone')->toArray();
		$pool['TELE2']['test_numbers'] = $testNumbersFull;
		$pool['BITE2'] = [];
		$pool['BITE2']['numbers'] = NumberList::where('carrier', 'BITE2')->pluck('phone')->toArray();
		$pool['BITE2']['test_numbers'] = $testNumbersBiteMissing;
//
//		foreach ($pool['BITE2']['numbers'] as $fromNumber) {
//
//			$startTime = Carbon::now();
//
//			$startTime = $startTime->copy()->addMinutes(rand(2, 10));
//			$endTime = $startTime->copy()->addMinutes(3);
//
//			CallSchedule::create([
//				'schedule_date'    => $startTime->toDateString(),
//				'call_phone'       => '+38682890349',
//				'call_start'       => $startTime->toDateTimeString(),
//				'call_end'         => $endTime->toDateTimeString(),
//				'credits_expected' => 3,
//				'phone'            => '+' . $fromNumber,
//			]);
//
//		}

//		dd('test1');


		foreach ($pool as $carrierName => $carrierValues) {

			$test = [];
			$carrierPhonePool = $carrierValues['test_numbers'];
			$carrierFromPool = $carrierValues['numbers'];
			$carrierFromIndex = 0;
			$carrierFromPoolTimes = [];

			while (count($carrierPhonePool) > 0) :

				$randomPhoneFromPool = collect($carrierPhonePool)->random(1)->first();
				$carrierPhonePool = array_diff($carrierPhonePool, [$randomPhoneFromPool]);

				if ($carrierFromIndex == count($carrierFromPool) - 1) {
					$carrierFromIndex = 0;
				} else {
					$carrierFromIndex++;
				}

				$fromNumber = $carrierFromPool[$carrierFromIndex];
				if (isset($carrierFromPoolTimes[$fromNumber])) {
					$startTime = Carbon::parse($carrierFromPoolTimes[$fromNumber]);
				} else {
					$carrierFromPoolTimes[$fromNumber] = Carbon::now();
					$startTime = Carbon::now();
				}


				$startTime = $startTime->copy()->addMinutes(rand(2, 5));
				$endTime = $startTime->copy()->addMinutes(3);

				$carrierFromPoolTimes[$fromNumber] = $endTime;

				CallSchedule::create([
					'schedule_date'    => $startTime->toDateString(),
					'call_phone'       => $randomPhoneFromPool,
					'call_start'       => $startTime->toDateTimeString(),
					'call_end'         => $endTime->toDateTimeString(),
					'credits_expected' => 3,
					'phone'            => '+' . $fromNumber,
				]);

			endwhile;

		}

		dd($test);

		$createArray = \App\NumberList::where('carrier', 'TELE2')->get()->transform(function ($p) {
			return [
				'phone'   => $p->phone,
				'carrier' => $p->carrier,
			];
		});

		foreach ($createArray as $usb) {
			foreach (self::generateScheduleBase() as $schedule) {
				$phone = $usb['phone'];
				if (!str_contains($usb['phone'], '+')) {
					$phone = '+' . $phone;
				}
				CallSchedule::create([
					'schedule_date'    => Carbon::parse($schedule['call_start'])->toDateString(),
					'call_phone'       => Modem::getPhoneDialNumber((int)$usb['phone']),
					'call_start'       => Carbon::parse($schedule['call_start'])->toDateTimeString(),
					'call_end'         => Carbon::parse($schedule['call_end'])->toDateTimeString(),
					'credits_expected' => $schedule['credits_expected'],
					'phone'            => $phone,
					'extended'         => (is_null($this->argument('usb'))) ? false : true,
				]);
			}
		}

	}

	private function generateScheduleBase(): array
	{

		if (!is_null($this->argument('date'))) {
			$dateNow = Carbon::parse($this->argument('date'));
		} else {
			$dateNow = Carbon::now();
		}

		if (!is_null($this->argument('time'))) {
			$startTime = $this->argument('time');
		} else {
			$startTime = self::DAY_START_TIME;;
		}

		$schedulerStart = $dateNow->format('Y-m-d') . ' ' . $startTime;
		$schedulerStart = Carbon::parse(($schedulerStart));

		$schedulerStart->addMinutes($this->getStartInterval());

		return $this->generatePhoneScheduler($schedulerStart);

	}

	private function generatePhoneScheduler($timeNow): array
	{

		$callList = [];
		$totalScheduleMinutes = 0;

		$limit = $this->argument('limit');
		if (!is_null($limit)) {
			if ($limit < 5) {
				$limit = 5;
			}
			$total = $limit + self::DAY_TIME_BUFFER;
		} else {
			$total = self::MAX_TOTAL_MINUTES_PER_DAY;
		}

		while ($totalScheduleMinutes <= $total) :

			$callTime = $timeNow;
			$callBreak = $this->getCallBreak();
			$callLength = $this->getCallLength();

			$callList[] = [
				'call_start'       => $callTime->toDateTimeString(),
				'call_end'         => $callTime->addMinutes($callLength)->toDateTimeString(),
				'credits_expected' => $callLength,
			];

			$timeNow->addMinutes($callBreak);
			$totalScheduleMinutes += $callLength;

		endwhile;

		return $callList;

	}

	private function getCallBreak(): int
	{
		$breakOffset = (is_null($this->argument('usb'))) ? 0 : self::BREAK_EXTEND_OFFSET;

		return rand(self::MIN_BREAK_MINUTES, self::MAX_BREAK_MINUTES - $breakOffset);
	}

	private function getCallLength(): int
	{
		return rand(self::MIN_MINUTES_PER_CALL, self::MAX_MINUTES_PER_CALL);
	}

	private function getStartInterval(): int
	{
		return rand(3, self::DAY_START_INTERVAL_MINUTES);
	}

}
